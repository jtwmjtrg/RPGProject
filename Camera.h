#pragma once
#include "direct3d.h"

// 概要、パラメータから視点変換行列を作成する
class Camera{
private:
	D3DXMATRIX	m_ViewMtx;		// 作成されたビュー変換行列 
	D3DXMATRIX	m_ProjMtx;		// 射影変換行列
	double		m_Yaw, m_Pitch;	// ヨー（Y軸回転角度）、ピッチ（X軸回転角度）
	double		m_Length;		// カメラと視る対象オブジェクトの距離

	static Camera* instance;	// シングルトンの実体
	Camera();

public:
	D3DXVECTOR3 m_Eye, m_At, m_Up;// 現在のカメラ位置、見ているものの位置、カメラ上向き
	virtual ~Camera();

	static Camera* GetInstance();		// 実体取得（シングルトン）
	static void Release();			// 実体削除

	//----------------------------------//
	//	視点位置と視る対象位置セット	//
	//									//
	//	引数	Eye	視る位置			//
	//			At	視る対象の位置		//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void SetEyeAtPos(const D3DXVECTOR3 &Eye, const D3DXVECTOR3 &At);

	//----------------------------------//
	//	角度のセット					//
	//									//
	//	引数	yaw		ヨー回転角度	//
	//			pitch	ピッチ回転角度	//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void SetRad(const double yaw, const double pitch);

	//----------------------------------//
	//	長さのセット					//
	//									//
	//	引数		length 長さ			//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void SetLength(const double length);

	//----------------------------------//
	//	視る対象位置更新				//
	//									//
	//	引数	MoveAt	更新情報		//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void UpdateAt(const D3DXVECTOR3 &MoveAt);

	//----------------------------------//
	//	角度の更新						//
	//									//
	//	引数	yaw		ヨー回転角度	//
	//			pitch	ピッチ回転角度	//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void UpdateRad(const float yaw, const float pitch);

	//----------------------------------//
	//	長さの更新						//
	//									//
	//	引数		length 長さ			//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void UpdateLength(float length);

	//----------------------------------//
	//	カメラの更新					//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	なし					//
	//----------------------------------//
	void Update();

	//----------------------------------//
	//	射影変換行列の作成
	//
	//	引数:	Aspect   アスペクト比	
	//			Far		 ファークリップ
	//			Near	 ニアクリップ
	//			Fovy	 視野角（４５度が通常）
	//
	//	戻り値：なし
	//----------------------------------//
	void SetProjMatrix(float Aspect, float Far = 1000.0f, float Near = 0.1f, float Fovy = D3DXToRadian(45));

	//----------------------------------//
	//	正射影変換行列の作成
	//
	//	引数:	W		ビュー幅
	//			H		ビュー高さ
	//			Far		ファークリップ
	//			Near	ニアクリップ
	//
	//	戻り値：なし
	//----------------------------------//
	void SetOrthoMatrix(float W, float H, float Far = 1000.0f, float Near = 0.1f);


	//----------------------------------//
	//	ビュー変換行列取得				//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	ビュー変換行列			//
	//----------------------------------//
	D3DXMATRIX GetViewMatrix();

	//----------------------------------//
	//	射影変換行列取得				//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	射影変換行列			//
	//----------------------------------//
	D3DXMATRIX GetProjMatrix();

	//----------------------------------//
	//	視点取得						//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	視点					//
	//----------------------------------//
	D3DXVECTOR3 GetEye();

	//----------------------------------//
	//	注視点取得						//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	注視点					//
	//----------------------------------//
	D3DXVECTOR3 GetAt();

	//----------------------------------//
	//	アップベクトル取得				//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	アップベクトル			//
	//----------------------------------//
	D3DXVECTOR3 GetUp();

	//----------------------------------//
	//	ヨー取得						//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	ヨー回転				//
	//----------------------------------//
	float GetYaw();

	//----------------------------------//
	//	ピッチ取得						//
	//									//
	//	引数	なし					//
	//									//
	//	戻り値	ピッチ回転				//
	//----------------------------------//
	float GetPitch();

	//----------------------------------//
	//	カメラ正面方向（正規化済み）取得//
	//									//
	//	引数		なし				//
	//									//
	//	戻り値	カメラ正面方向ベクトル	//
	//----------------------------------//
	D3DXVECTOR3 GetDirection();
};
